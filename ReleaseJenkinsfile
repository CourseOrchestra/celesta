properties(
[
	pipelineTriggers([
		triggers: [
			 [
				  $class: 'hudson.triggers.SCMTrigger',
				  scmpoll_spec : 'H/10 * * * *'
			 ]
		]
  ])
]
)

node {
    def server = Artifactory.server 'ART'
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo
    def descriptor
    def releaseVersion

    stage ('Clone') {
        checkout scm
    }

    stage ('Artifactory configuration') {
        rtMaven.tool = 'M3'
        rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
        rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
        rtMaven.deployer.artifactDeploymentPatterns.addExclude("*celesta-test*").addExclude("*dbschemasync*")
        buildInfo = Artifactory.newBuildInfo()
        buildInfo.env.capture = true

        descriptor = Artifactory.mavenDescriptor()
        pom = readMavenPom file: 'pom.xml'
        releaseVersion = pom.version.split('-')[0]
        descriptor.version = releaseVersion
        descriptor.failOnSnapshot = true
        descriptor.transform()
    }

    stage ('Make release') {
        rtMaven.run pom: 'pom.xml', goals: '-Dmaven.test.skip=true clean install -P corchestra-release', buildInfo: buildInfo
        server.publishBuildInfo buildInfo

        def distributionConfig = [
            // Mandatory parameters
            'buildName'             : buildInfo.name,
            'buildNumber'           : buildInfo.number,
            'targetRepo'            : 'orchestra',
            // Optional parameters
            'overrideExistingFiles' : true // Default: false. If true, Artifactory overwrites builds already existing in the target path in Bintray.
        ]
        server.distribute distributionConfig
    }

    stage ('Update repository') {
        sh '''git commit -m "updating poms for ${releaseVersion} release"'''
        sh '''git tag releaseVersion'''

        def newSnapshotVersion = (releaseVersion.split('.')[2].toInteger() + 1) + '-SNAPSHOT'
        descriptor.version = newSnapshotVersion
        descriptor.failOnSnapshot = false
        descriptor.transform()

        sh '''git commit -m "updating poms for ${newSnapshotVersion} development"'''

        sh '''git push origin dev'''
        sh '''git push --tags'''
    }
}