options{
    IGNORE_CASE=true ;
    UNICODE_INPUT=true;
    STATIC=false;
//  DEBUG_LOOKAHEAD= true ;
    FORCE_LA_CHECK=true;
//  DEBUG_TOKEN_MANAGER=true;
}
PARSER_BEGIN(FilterParser)
package ru.curs.celesta.dbutils.filter;

import java.util.Date;
import java.io.StringReader;
import ru.curs.celesta.CelestaException;

public class FilterParser{
   private static final String INVALID_QUOTED_FORMAT = "Invalid quoted string format.";

   public static enum FilterType { NUMERIC , TEXT , DATETIME , OTHER };

   public interface SQLTranslator {
       String translateDate(String date) throws CelestaException;
   }

   private FilterType filterType;
   private String fieldName;
   private SQLTranslator tr;
   
   FilterParser(StringReader sr, SQLTranslator tr) {
        this(sr);
        this.tr = tr;
   }

   public static String translateFilter(FilterType fieldType, String fieldName, String filter, SQLTranslator tr) throws CelestaException {
	 StringReader sr = new StringReader(filter);
     try {
		 FilterParser parser = new FilterParser(sr, tr);
		 try {
            return parser.filterExpr(fieldType, fieldName);
		 } catch (ParseException e) {
		    throw new CelestaException("Invalid field filter '%s': %s", filter, e.getMessage());
         } catch (TokenMgrError e) {
            throw new CelestaException("Invalid field filter '%s': %s", filter, e.getMessage());
         }
     } finally {
         sr.close();
     }
   }
   
   private String translateDate(String dateLiteral) throws ParseException {
        try{
            return tr.translateDate(dateLiteral);  
        } catch (CelestaException e) {
            throw new ParseException(e.getMessage());
        }
   }


	public static String quoteString(String lexvalue) {
		StringBuilder sb = new StringBuilder();
		sb.append('\'');
		for (int i = 0; i < lexvalue.length(); i++) {
			char c = lexvalue.charAt(i);
			sb.append(c);
			if (c == '\'')
				sb.append('\'');
		}
		sb.append('\'');
		return sb.toString();
	}
	public static String unquoteString(String lexvalue) throws ParseException {
		StringBuilder sb = new StringBuilder();
		int state = 0;
		for (int i = 0; i < lexvalue.length(); i++) {
			char c = lexvalue.charAt(i);
			switch (state) {
			case 0:
				if (c == '\'') {
					state = 1;
				} else {
					throw new ParseException(INVALID_QUOTED_FORMAT);
				}
				break;
			case 1:
				if (c == '\'') {
					state = 2;
				} else {
					sb.append(c);
				}
				break;
			case 2:
				if (c == '\'') {
					sb.append('\'');
					state = 1;
				} else {
					throw new ParseException(INVALID_QUOTED_FORMAT);
				}
			default:
			}
		}
		return sb.toString();
	}

   
}
PARSER_END(FilterParser)

SKIP:
{
    " "
}

TOKEN: 
{
    < S_DOUBLE: ("-")? ((<S_INTEGER>)? "." <S_INTEGER> ( ["e","E"] ([ "-","+"])? <S_INTEGER> )? 
                |
                (<S_INTEGER>)+ (".")? ["e","E"] ([ "-","+"])? (<S_INTEGER>)+
                )>
  | < S_INTEGER: ("-")? ( <DIGIT> )+ >
  | < #DIGIT: ["0" - "9"] >
  | < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
  | < S_NULL: "NULL">
}

String filterExpr(FilterType filterType, String fieldName):
{
  this.filterType = filterType;
  this.fieldName = fieldName;
  String result;
}
{
  (
    LOOKAHEAD({filterType == FilterType.OTHER})   result = nullExpr() <EOF>
  | LOOKAHEAD({filterType != FilterType.OTHER})    result = expr() <EOF>
  )
   {return result;}
}

String nullExpr():
{
}
{
      <S_NULL>     {return String.format("%s is null", fieldName);}
	|"!" <S_NULL>  {return String.format("not (%s is null)", fieldName);}
}

String expr():
{
  String buf;
  StringBuilder result = new StringBuilder();
}
{
  ( buf = singleExpr() {result.append(buf);}
   [
     ("&" buf = singleExpr() {result.append(" and " +  buf);})+
     | 
     ("|" buf = singleExpr() {result.append(" or " +buf);})+
   ]
   )
   { return result.toString();}
}

String singleExpr():
{
  String buf;
  String result;
}
{
   ( ("(" buf = expr() ")")    { result = "(" + buf + ")";}
   | ("!" buf = singleExpr())  { result = "not (" + buf + ")";} 
   | buf = term()              { result =  buf;}
   )
   {return result;}
}

String term():
{
 Token tok;
 String result;
}
{
  ( 
  tok = <S_NULL>                              { result = String.format("%s is null", fieldName);}
  | LOOKAHEAD({filterType == FilterType.NUMERIC}) result = numTerm()
  | LOOKAHEAD({filterType == FilterType.DATETIME})    result = dateTerm() 
  | LOOKAHEAD({filterType == FilterType.TEXT})    result = textTerm() 
  )
  {return result;}
}

String numTerm(): {String val1; String val2;}{ 
     (">" val1 = number()  {return String.format("%s > %s", fieldName, val1);})
   | ("<" val1 = number()  {return String.format("%s < %s", fieldName, val1);})
   | (".." val1 = number() {return String.format("%s <= %s", fieldName, val1);})  
   | (val1 = number() [".." [val2 = number() {return String.format("%s between %s and %s", fieldName, val1, val2);}] {return String.format("%s >= %s", fieldName, val1);}] 
   {return String.format("%s = %s", fieldName, val1);})
}

String number(): {Token tok;}{
     tok = <S_INTEGER> {return tok.toString();}
   | tok = <S_DOUBLE>  {return tok.toString();}
}


String dateTerm(): {String val1; String val2;}{ 
     (">" val1 = date()  {return String.format("%s > %s", fieldName, val1);})
   | ("<" val1 = date()  {return String.format("%s < %s", fieldName, val1);})
   | (".." val1 = date() {return String.format("%s <= %s", fieldName, val1);})  
   | (val1 = date() [".." [val2 = date() {return String.format("%s between %s and %s", fieldName, val1, val2);}] {return String.format("%s >= %s", fieldName, val1);}] 
   {return String.format("%s = %s", fieldName, val1);})
}

String date(): {Token tok;}{
     tok = <S_CHAR_LITERAL> {return translateDate(tok.toString());}
}


String textTerm(): {String val1; String val2; boolean ci = false; String fn = fieldName;}{
   ["@" {ci = true; fn = "UPPER(" + fn + ")";}]
   (   
     (">"  val1 = text(ci) {return String.format("%s > %s", fn, val1);})
   | ("<"  val1 = text(ci) {return String.format("%s < %s", fn, val1);})
   | (".." val1 = text(ci) {return String.format("%s <= %s", fn, val1);})
   | val1 = likeFilter(ci) {return String.format("%s like %s", fn,  quoteString(val1));}   
   | (val1 = text(ci) 
        [  (".." [val2 = text(ci) {return String.format("%s between %s and %s", fn, val1, val2);}] {return String.format("%s >= %s", fn, val1);})
        |  val2 = likeFilter(ci) {return String.format("%s like %s", fn,  quoteString(unquoteString(val1) + val2));}
        ] 
        {return String.format("%s = %s", fn, val1);})
	)
}

String likeFilter(boolean ci):
{
StringBuilder sb = new StringBuilder();
String val;
}
{   (
    "%" {sb.append('%');}
    [ val = text(ci) {sb.append (unquoteString(val));} 
      [val = likeFilter(ci) {sb.append (val);}]
    ]
    ){return sb.toString();}
}

String text(boolean ci): {Token tok;}{
     tok = <S_CHAR_LITERAL> {return ci? tok.toString().toUpperCase() : tok.toString();}
}