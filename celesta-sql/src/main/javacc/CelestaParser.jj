options{
    IGNORE_CASE=true ;
    UNICODE_INPUT=true;
    STATIC=false;
    FORCE_LA_CHECK=true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
}

PARSER_BEGIN(CelestaParser)
package ru.curs.celesta.score;

import java.util.List;
import java.util.ArrayList;
import java.io.StringReader;

import ru.curs.celesta.CelestaException;
import ru.curs.celesta.DBType;

import ru.curs.celesta.score.GrainPart;
import ru.curs.celesta.score.validator.IdentifierParser;
import ru.curs.celesta.score.io.Resource;

//CHECKSTYLE:OFF
public class CelestaParser{
    public static Expr parseComplexFilter(String filter, IdentifierParser identifierParser) {
        try (StringReader sr = new StringReader(filter)) {
            CelestaParser parser = new CelestaParser(sr);
            return parser.sqlExpression(identifierParser);
        } catch (ParseException e) {
            CelestaException ce = new CelestaException("Invalid complex filter '%s': %s", filter, e.getMessage());
            ce.initCause(e);
            throw ce;
        }
    }
}
PARSER_END(CelestaParser)



<*> SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}

<*> TOKEN: /* SQL keywords */
{
    <K_ACTION:       "ACTION">
|   <K_ADD:          "ADD">
|   <K_ALTER:        "ALTER">
|   <K_AND:          "AND">
|   <K_AS:           "AS">
|   <K_BETWEEN:      "BETWEEN">
|   <K_BY:           "BY">
|   <K_CASCADE:      "CASCADE">
|   <K_CONSTRAINT:   "CONSTRAINT">
|   <K_COUNT:        "COUNT">
|   <K_CREATE:       "CREATE">: CREATE_STATE
|   <K_DEFAULT:      "DEFAULT">
|   <K_DELETE:       "DELETE">
|   <K_DISTINCT:     "DISTINCT">
|   <K_EXEC:         "EXEC"|"EXECUTE">: EXEC_STATE
|   <K_FALSE:        "FALSE">
|   <K_FOREIGN:      "FOREIGN">
|   <K_FROM:         "FROM">
|   <K_FULL:         "FULL">
|   <K_GETDATE:      "GETDATE">
|   <K_GROUP:        "GROUP">
|   <K_IN:           "IN">
|   <K_INNER:        "INNER">
|   <K_IS:           "IS">
|   <K_JOIN:         "JOIN">
|   <K_KEY:          "KEY">
|   <K_LEFT:         "LEFT">
|   <K_LIKE:         "LIKE">
|   <K_MAX:          "MAX">
|   <K_MIN:          "MIN">
|   <K_NEXTVAL:      "NEXTVAL">
|   <K_NO:           "NO">
|   <K_NOT:          "NOT">
|   <K_NULL:         "NULL">
|   <K_ON:           "ON">
|   <K_OR:           "OR">
|   <K_PRIMARY:      "PRIMARY">
|   <K_REFERENCES:   "REFERENCES">
|   <K_RIGHT:        "RIGHT">
|   <K_SELECT:       "SELECT">
|   <K_SET:          "SET">
|   <K_SUM:          "SUM">
|   <K_TEXT:         "TEXT">
|   <K_TRUE:         "TRUE">
|   <K_UPDATE:       "UPDATE">
|   <K_WITH:         "WITH">
|   <K_WHERE:        "WHERE">
|   <K_UNION:        "UNION">
|   <K_ALL:          "ALL">
|   <K_TABLE:        "TABLE">: DEFAULT
|   <K_FUNCTION:     "FUNCTION">: DEFAULT
|   <K_INDEX:        "INDEX">: DEFAULT
|   <K_MATERIALIZED: "MATERIALIZED">
|   <K_SEQUENCE:     "SEQUENCE">: SEQUENCE_STATE
|   <K_VIEW:         "VIEW">: DEFAULT
|   <K_END_OF_STATEMENT: ";">: DEFAULT
}

<CREATE_STATE, SET_SCHEMA_STATE> TOKEN:
{
    <K_GRAIN:   "GRAIN"|"SCHEMA">
}

<CREATE_STATE> TOKEN:
{
    <K_GRAIN_VERSION: "VERSION">
}

<SEQUENCE_STATE> TOKEN:
{
    <K_SEQUENCE_CYCLE:        "CYCLE">
|   <K_SEQUENCE_MAXVALUE:     "MAXVALUE">
|   <K_SEQUENCE_MINVALUE:     "MINVALUE">
|   <K_SEQUENCE_START:        "START">
|   <K_SEQUENCE_INCREMENT:    "INCREMENT">
}

<OPTIONS_STATE> TOKEN:
{
     <K_READ:        "READ">
|    <K_ONLY:        "ONLY">
|    <K_VERSION:     "VERSION">
|    <K_CHECK:       "CHECK">
|    <K_AUTOUPDATE:  "AUTOUPDATE">
}

<EXEC_STATE> TOKEN:
{
     <K_NATIVE:   "NATIVE">
|    <K_DBTYPE:   "ORACLE"|"POSTGRESQL"|"MSSQL"|"H2">
|    <NATIVE_SQL: "--{{" (~["-"]|"-"(("-")+"}-")*(~["-"]|("-")+(~["-", "}"]|"}"~["-", "}"])))*"-"(("-")+"}-")*("-")+"}}">
|    <K_AFTER:    "AFTER">
|    <K_BEFORE:   "BEFORE">
}

<DATETIME_STATE> TOKEN:
{
    <K_TIME:         "TIME">
|   <K_ZONE:         "ZONE">: DEFAULT
}

TOKEN: /* Datatypes */
{
   <K_INT:       "INT">
|  <K_REAL:      "REAL">
|  <K_DECIMAL:   "DECIMAL">
|  <K_VARCHAR:   "VARCHAR">
|  <K_BLOB:      "BLOB">
|  <K_DATETIME:  "DATETIME">
|  <K_BIT:       "BIT">
}

<*> TOKEN : /* Numeric literals */
{
	< S_DOUBLE: ((<S_INTEGER>)? "." <S_INTEGER> ( ["e","E"] ([ "-","+"])? <S_INTEGER> )?
				|
				(<S_INTEGER>)+ (".")? ["e","E"] ([ "-","+"])? (<S_INTEGER>)+
				)>
  | 	< S_INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
  |     <S_BINARY_LITERAL: "0x"(["a"-"f", "A"-"F", "0"-"9"]["a"-"f", "A"-"F", "0"-"9"])+>
}

<*> TOKEN: {< T_MINUS: "-" >}

<*> TOKEN:
{
	< S_IDENTIFIER:  (( <LETTER> )+ ( <DIGIT> | <LETTER> )*) | ("\"" (~["\""])* "\"") >
|   < S_PARAM: "$"<S_IDENTIFIER> >
| 	< #LETTER: ["a"-"z", "A"-"Z", "_"] >
|   < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" | ("`" (~["\n","\r","`"])* "`") >
|   < CELESTA_DOC: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


GrainPart extractGrainInfo(AbstractScore s, Resource r):
{
    Token t;
    boolean isDefinition = false;
    String grainName;
    Grain grain;
}
{
    (
        (
            [<CELESTA_DOC>]
            <K_CREATE>
            <K_GRAIN>
            t = <S_IDENTIFIER>
            {
                isDefinition = true;
            }
        )
        |
        (
            <K_SET> { token_source.SwitchTo(SET_SCHEMA_STATE); }
            <K_GRAIN> t = <S_IDENTIFIER>
        )
    )
    {
        grainName = s.getIdentifierParser().parse(t.toString());
        grain = s.getGrains().get(grainName);

        if (grain == null) grain = new Grain(s, t.toString());

        return new GrainPart(grain, isDefinition, r);
    }
}


/*Metamodel. Root rule.*/
Grain parseGrainPart(GrainPart grainPart) :
{
   /*This work is dedicated to Maria, my misterious muse :-)
     Ivan Ponomarev, June 2013.*/

   Token t;
   Token doc = null;
   boolean val = true;
}
{
   ([doc = <CELESTA_DOC>]
   <K_CREATE>
   <K_GRAIN>
   t = <S_IDENTIFIER>
   {
       if (doc != null) {grainPart.setCelestaDocLexem(doc.toString()); doc = null;}
   }
   <K_GRAIN_VERSION>
   t = <S_CHAR_LITERAL> {grainPart.setVersion(t.toString());}
    [
        <K_WITH> { token_source.SwitchTo(OPTIONS_STATE); }
            [ <K_NO> {val = false;} ]
            <K_AUTOUPDATE> { grainPart.setAutoupdate(val); }
    ]
    |
    (
    <K_SET> { token_source.SwitchTo(SET_SCHEMA_STATE); }
    <K_GRAIN> t = <S_IDENTIFIER>
    ))
    <K_END_OF_STATEMENT>
   (
    (
            ([doc = <CELESTA_DOC>] <K_CREATE> (
                    createTable(grainPart, doc == null? null: doc.toString())
                  | createIndex(grainPart, doc == null? null: doc.toString())
				  | createView(grainPart, doc == null? null: doc.toString())
				  | createMaterializedView(grainPart, doc == null? null: doc.toString())
				  | createFunction(grainPart, doc == null? null: doc.toString())
				  | createSequence(grainPart, doc == null? null: doc.toString())
				  )
				  {doc = null;} )
	        | (<K_ALTER>   alterTable(grainPart))
	    | (<K_EXEC> executeNativeSql(grainPart))
	 )
	 <K_END_OF_STATEMENT>)*
   <EOF>
   {
   return grainPart.getGrain();
   }
}

void createTable(GrainPart g, String doc):
{
	TableBuilder table = null;
	Token t = null;
    boolean val = true;
}
{
    <K_TABLE>
	t = <S_IDENTIFIER> {table = new TableBuilder(g, t.toString());
	                    table.setCelestaDocLexem(doc);}
	"("
		tableConstituent(table)	("," tableConstituent(table))*
	")"

	[<K_WITH> { token_source.SwitchTo(OPTIONS_STATE); }
	   (
	     (
	       <K_READ> <K_ONLY> {table.setVersioned(false);
	                          table.setReadOnly(true);}
	     )
	   |
	     ( {val = true;}  [ <K_NO> {val = false;} ]
	       (
	         <K_VERSION> <K_CHECK> {table.setVersioned(val);}
	       |
	         <K_AUTOUPDATE>        {table.setAutoUpdate(val);}
	       )
	     )+
	   )
	]
	{
	  table.build();
    }
}

void tableConstituent(TableBuilder table):{
  String name;
  TableBuilder.ForeignKeyBuilder fk;
}
{
     columnDefinition(table)
   | name = constraint(table.getGrain()) (
          primaryKey(table) {table.setPkConstraintName(name);}
        | fk = foreignKey(table) {fk.setConstraintName(name);})
}

void columnDefinition(TableBuilder table):
{
   TableBuilder.ColumnBuilder column = null;
   Token t;
   Token length = null;
   boolean nullable;
   boolean negative = false;
   boolean pk = false;
   TableBuilder.ForeignKeyBuilder fk = null;
   String name;
   Token doc = null;
   SequenceElement sequence = null;
   String defaultValue = null;
   Token precision = null;
   Token scale = null;
}
{
 [doc = <CELESTA_DOC>]
  t = <S_IDENTIFIER>
    (  (<K_INT>       {column = table.integerColumn(t.toString()); t = null; }
	       nullable = nullable()
	       [
	         (   <K_DEFAULT> ((["-" {negative = true;}] t = <S_INTEGER> {defaultValue = (negative? "-": "") + t.toString();})
	           | ( defaultValue = sequenceNextVal() [<K_NOT> <K_NULL> {nullable = false;}]) )
	         )
	       ]
	    )
    |  (<K_REAL>      {column = table.floatingColumn(t.toString()); t = null;}
	       nullable = nullable()
		  [<K_DEFAULT> ["-" {negative = true;}] (t = <S_INTEGER> | t = <S_DOUBLE>) {defaultValue = (negative? "-": "") + t.toString();}])
    |  (<K_DECIMAL> "(" precision = <S_INTEGER> "," scale = <S_INTEGER> ")"
          {
            column = table.decimalColumn(
                t.toString(), Integer.parseInt(precision.toString()), Integer.parseInt(scale.toString())
            );
            t = null;
          }
          nullable = nullable()
          [<K_DEFAULT> ["-" {negative = true;}] (t = <S_DOUBLE>) {defaultValue = (negative? "-": "") + t.toString();}])
    |  (<K_VARCHAR> {column = table.stringColumn(t.toString()); t = null; }
	          ["("  (length = <S_INTEGER> /* | length = <K_MAX>*/) ")"]
			  {column.setLength(length.toString());}
	       nullable = nullable()
		  [<K_DEFAULT> t = <S_CHAR_LITERAL>])
    |  (<K_TEXT> {column = table.stringColumn(t.toString());
	              column.setLength("MAX");
				  t = null;}
	       nullable = nullable()
		  [<K_DEFAULT> t = <S_CHAR_LITERAL>])
    |  (<K_BLOB>     {column = table.binaryColumn(t.toString()); t = null;}
	       nullable = nullable()
		  [<K_DEFAULT> t = <S_BINARY_LITERAL>])
    |  (<K_DATETIME>
        [
            <K_WITH> {token_source.SwitchTo(DATETIME_STATE);}
             <K_TIME> <K_ZONE> { column = table.zonedDateTimeColumn(t.toString());}
        ]
        {
            if (column == null) {
                column = table.dateTimeColumn(t.toString());
            }
            t = null;
        }
	       nullable = nullable()
		  [<K_DEFAULT> (t = <S_CHAR_LITERAL> | t = <K_GETDATE> "(" ")")])
    |  <K_BIT>       {column = table.booleanColumn(t.toString()); t = null;}
	       nullable = nullable()
	      [<K_DEFAULT> (t = <S_CHAR_LITERAL> | t = <S_INTEGER> | t=<K_FALSE>|t=<K_TRUE>)])
	name = constraint(table.getGrain()) [<K_PRIMARY> <K_KEY>
	      {pk = true; table.setPkConstraintName(name);} name = constraint(table.getGrain())]
	{
	  column.setNullableAndDefault(nullable, defaultValue != null ? defaultValue : t == null ? null :  t.toString());
	  column.setCelestaDocLexem(doc == null? null:doc.toString());

	  if (pk) {
	    table.addPK(column.getName());
	    table.finalizePK();
	  }
    }
	[<K_FOREIGN> <K_KEY> {fk = table.foreignKey(); fk.addColumn(column.getName()); fk.setConstraintName(name);} references(fk)]
}

boolean nullable():
{
  boolean result = true;
}
{
[<K_NULL>         {result = true;} |<K_NOT> <K_NULL> {result = false;}] { return result;}
}

void primaryKey(TableBuilder table):
{
  Token t;
  IdentifierParser identifierParser = table.getGrain().getScore().getIdentifierParser();
}
{
  <K_PRIMARY> <K_KEY> "(" t = <S_IDENTIFIER> {table.addPK(t.toString());}
                     ("," t = <S_IDENTIFIER> {table.addPK(t.toString());})* ")"
  {
    table.finalizePK();
  }
}

TableBuilder.ForeignKeyBuilder foreignKey(TableBuilder table):{
  Token t;
  TableBuilder.ForeignKeyBuilder fk;
}
{
<K_FOREIGN><K_KEY> { fk = table.foreignKey();}
   "(" t = <S_IDENTIFIER> {fk.addColumn(t.toString());}
  ("," t = <S_IDENTIFIER> {fk.addColumn(t.toString());})* ")"

  references(fk) {
  return fk;
  }
}

void references(TableBuilder.ForeignKeyBuilder fk):{
  Token t;
  Token t2 = null;
  FKRule action;
}
{
<K_REFERENCES> t = <S_IDENTIFIER> ["." t2 = <S_IDENTIFIER>]
  { if (t2 == null)
      fk.setReferencedTable("", t.toString());
	else
	  fk.setReferencedTable(t.toString(), t2.toString());}

  "(" t = <S_IDENTIFIER> {fk.addReferencedColumn(t.toString());}
  ("," t = <S_IDENTIFIER> {fk.addReferencedColumn(t.toString());})* ")"
{fk.finalizeReference();}
[<K_ON>
  ((<K_UPDATE> action = action() {fk.setUpdateRule(action);}
    [<K_ON> <K_DELETE> action = action() {fk.setDeleteRule(action);}])
  |(<K_DELETE> action = action() {fk.setDeleteRule(action);}
    [<K_ON> <K_UPDATE> action = action() {fk.setUpdateRule(action);}]))
]
}

FKRule action():{
  FKRule result;
}
{
   ((<K_NO> <K_ACTION> {result = FKRule.NO_ACTION;})
  |(<K_SET> <K_NULL>  {result =  FKRule.SET_NULL;})
  | (<K_CASCADE>        {result =  FKRule.CASCADE;}))
  {
    return result;
  }
}

void createIndex(GrainPart g, String doc):{
Token indexName;
Token tableName;
Token columnName;
Index ind;
}
{
<K_INDEX> indexName = <S_IDENTIFIER> <K_ON> tableName = <S_IDENTIFIER>
   {ind = new Index(g, tableName.toString(), indexName.toString());
    ind.setCelestaDocLexem(doc);}
   "(" columnName = <S_IDENTIFIER> {ind.addColumn(columnName.toString());} ("," columnName = <S_IDENTIFIER>{ind.addColumn(columnName.toString());}) * ")"
   {ind.finalizeIndex();}
}

void alterTable(GrainPart g):{
  Token t;
  BasicTable table;
  TableBuilder tb;
  String name;
  TableBuilder.ForeignKeyBuilder fk;
  IdentifierParser identifierParser =  g.getGrain().getScore().getIdentifierParser();
}
{
<K_TABLE> t = <S_IDENTIFIER> {
  table = g.getGrain().getElement(identifierParser.parse(t.toString()), BasicTable.class);
}
<K_ADD> name = constraint(g.getGrain())  fk = foreignKey(tb = new TableBuilder(table)) {
    fk.setConstraintName(name);
    tb.build();
  }
}

String constraint(Grain g):{
Token t = null;
}
{
[<K_CONSTRAINT> t = <S_IDENTIFIER>]
{
if (t == null)
  return null;
else {
  g.addConstraintName(t.toString());
  return t.toString();
}
}
}

void createView(GrainPart g, String doc):
{
	View view = null;
	Token viewName = null;
}
{
<K_VIEW> viewName = <S_IDENTIFIER> <K_AS>
    {
        view = new View(g, viewName.toString());
	    view.setCelestaDocLexem(doc);
	}
	unionAll(view)
}

void unionAll(View view):
{
   AbstractSelectStmt selectStmt = view.addSelectStatement();
}
{
   select(selectStmt)	{selectStmt.finalizeParsing();}
   (<K_UNION> <K_ALL>   {selectStmt = view.addSelectStatement();}
     select(selectStmt) {selectStmt.finalizeParsing();})*
   { view.finalizeParsing();}
}

void createMaterializedView(GrainPart g, String doc):
{
    MaterializedView view = null;
    Token viewName = null;
    AbstractSelectStmt selectStmt = null;
}
{
<K_MATERIALIZED> <K_VIEW> viewName = <S_IDENTIFIER> <K_AS>
    {
        view = new MaterializedView(g, viewName.toString());
        view.setCelestaDocLexem(doc);
        selectStmt = view.addSelectStatement();
    }
    materializedSelect(selectStmt)
    {selectStmt.finalizeParsing();
     view.finalizeParsing();}
}

void createFunction(GrainPart g, String doc):
{
    ParameterizedView v = null;
    Token viewName = null;
}
{
<K_FUNCTION> viewName = <S_IDENTIFIER>
    {
        v = new ParameterizedView(g, viewName.toString());
        v.setCelestaDocLexem(doc);
    }
"(" functionParam(v) ("," functionParam(v))* ")"
    <K_AS>
    unionAll(v)
}

void createSequence(GrainPart g, String doc):
{
    SequenceElement s = null;
    Token name = null;
}
{
<K_SEQUENCE> name = <S_IDENTIFIER>
    {
        s = new SequenceElement(g, name.toString());
        s.setCelestaDocLexem(doc);
    }
    (     sequenceStartWith(s)
        | sequenceIncrementBy(s)
        | sequenceMinValue(s)
        | sequenceMaxValue(s)
        | sequenceCycle(s)
    )*
    {s.finalizeParsing();}
}

void sequenceStartWith(SequenceElement s):
{
    long val;
}
{
    <K_SEQUENCE_START> <K_WITH> val = signedInteger()
    {
        s.startWith(val);
    }
}

void sequenceIncrementBy(SequenceElement s):
{
    long val;
}
{
    <K_SEQUENCE_INCREMENT> <K_BY> val = signedInteger()
    {
        s.incrementBy(val);
    }
}

long signedInteger(): {int sign = 1; Token val;}{
    ["-" {sign = -1;}]
    val =  <S_INTEGER>
    {return sign * Long.parseLong(val.image);}
}

void sequenceMinValue(SequenceElement s):
{
    long val;
}
{
    <K_SEQUENCE_MINVALUE> val = signedInteger()
    {
        s.minValue(val);
    }
}

void sequenceMaxValue(SequenceElement s):
{
    long val;
}
{
    <K_SEQUENCE_MAXVALUE> val = signedInteger()
    {
        s.maxValue(val);
    }
}

void sequenceCycle(SequenceElement s):
{}
{
    <K_SEQUENCE_CYCLE>
        {
            s.setIsCycle(true);
        }
}

void functionParam(ParameterizedView view):
{
    Token doc = null;
    Token t;
    Parameter p;
    String name;
}
{
   [doc = <CELESTA_DOC>]
   t = <S_IDENTIFIER> {name = t.toString();}
    (  (<K_INT>       {p = new Parameter(name, ViewColumnType.INT);  })
    |  (<K_REAL>      {p = new Parameter(name, ViewColumnType.REAL); })
    |  (<K_DECIMAL>   {p = new Parameter(name, ViewColumnType.DECIMAL); })
    |  (<K_VARCHAR>   {p = new Parameter(name, ViewColumnType.TEXT); })
    |  (<K_TEXT>      {p = new Parameter(name, ViewColumnType.TEXT); })
    |  (<K_DATETIME>  {p = new Parameter(name, ViewColumnType.DATE); })
    |  (<K_BIT>       {p = new Parameter(name, ViewColumnType.BIT);  })
    )
    {
        p.setCelestaDocLexem(doc == null? null:doc.toString());
        view.addParameter(p);
    }
}


Expr sqlExpression(IdentifierParser identifierParser):
{ Expr result;
  List<Expr> operands = new ArrayList<Expr>(5);}
{
    result = sqlAndExpression(identifierParser)   {operands.add(result);} (<K_OR>
	  result = sqlAndExpression(identifierParser) {operands.add(result);}
	  )*
	{return operands.size() == 1? result : new BinaryLogicalOp(BinaryLogicalOp.OR, operands);}
}

Expr sqlAndExpression(IdentifierParser identifierParser):
{ Expr result;
  List<Expr> operands = new ArrayList<Expr>(5);}
{
    result = sqlUnaryLogicalExpression(identifierParser)    {operands.add(result);} (<K_AND>
	  result = sqlUnaryLogicalExpression(identifierParser)  {operands.add(result);}
	  )*
	{return operands.size() == 1? result : new BinaryLogicalOp(BinaryLogicalOp.AND, operands);}
}

Expr sqlUnaryLogicalExpression(IdentifierParser identifierParser):
{ boolean isNot = false;
  Expr result;}
{
  [<K_NOT> {isNot = true;}] result = sqlRelationalExpression(identifierParser)
  {return isNot? new NotExpr(result) : result; }
}

Expr sqlRelationalExpression(IdentifierParser identifierParser):
{ Expr result;
  Expr buf1;
  Expr buf2;
  List<Expr> operands = new ArrayList<Expr>(5);
  int relop;}
{
    result = sqlTermExpr(identifierParser)
    (   relop = relop() buf1 = sqlTermExpr(identifierParser)                            {result = new Relop(result, buf1, relop);}
      | <K_IN> "(" buf1 = sqlTermExpr(identifierParser) {operands.add(buf1);} ("," buf1 = sqlTermExpr(identifierParser) {operands.add(buf1);})* ")"
	                                                                    {result = new In(result, operands);}
      | <K_BETWEEN> buf1 = sqlTermExpr(identifierParser) <K_AND> buf2 = sqlTermExpr(identifierParser) {result = new Between(result, buf1, buf2);}
      | <K_LIKE> buf1 = sqlTermExpr(identifierParser)                                 {result = new Relop(result, buf1, Relop.LIKE);}
      | <K_IS> <K_NULL>                                               {result = new IsNull(result);}
    )?
	{return result;}
}

int relop():
{int result;}
{ (
    "=" {result = Relop.EQ;}
  | ">" {result = Relop.GT;} ["=" {result = Relop.GTEQ;}]
  | "<" {result = Relop.LS;} ["=" {result = Relop.LSEQ;} | ">" {result = Relop.NTEQ;}]
  )
  {return result;}
}

Expr sqlTermExpr(IdentifierParser identifierParser):
{ Expr result;
  List<Expr> operands = new ArrayList<Expr>(5);
  int operator = -1;}
{
    result = sqlMultiplicativeExpression(identifierParser) {operands.add(result);} ( ( "+" {operator = BinaryTermOp.PLUS;}
	                                                                 | "-" {operator = BinaryTermOp.MINUS;}
																	 | "||"{operator = BinaryTermOp.CONCAT;})
                                 result =  sqlMultiplicativeExpression(identifierParser) {operands.add(result);}
                               )*
    {return operands.size() == 1? result : new BinaryTermOp(operator, operands);}
}

Expr sqlMultiplicativeExpression(IdentifierParser identifierParser):
{ Expr result;
  List<Expr> operands = new ArrayList<Expr>(5);
  int operator = -1;}
{
    result = sqlUnaryExpression(identifierParser) {operands.add(result);} (  ("*" {operator = BinaryTermOp.TIMES;} | "/" {operator = BinaryTermOp.OVER;})
	                     result = sqlUnaryExpression(identifierParser) {operands.add(result);}
						 )*
	{return operands.size() == 1? result : new BinaryTermOp(operator, operands);}
}

Expr sqlUnaryExpression(IdentifierParser identifierParser):
{Expr result;
boolean isMinus = false;}
{
    ["-" {isMinus = true;}] result = sqlPrimaryExpression(identifierParser)
    {return isMinus? new UnaryMinus(result) : result;}
}


Expr sqlPrimaryExpression(IdentifierParser identifierParser):
{Expr result;
Token t = null;}
{ (
    t = <S_INTEGER>          {result = new IntegerLiteral(t.toString());}
  | t = <S_DOUBLE>           {result = new RealLiteral(t.toString());}
  | t = <S_CHAR_LITERAL>     {result = new TextLiteral(t.toString());}
  | t = <S_PARAM>            {result = new ParameterRef(t.toString().substring(1));}
  | t = <K_TRUE>             {result = new BooleanLiteral(true);}
  | t = <K_FALSE>            {result = new BooleanLiteral(false);}
  | <K_GETDATE> "(" ")"      {result = new GetDate();}
  | "(" result = sqlExpression(identifierParser) ")"  {result = new ParenthesizedExpr(result);}
  | result = fieldReference(identifierParser)
  ) {return result;}
}

FieldRef fieldReference(IdentifierParser identifierParser):
{  
  String tableName = null;
  String fieldName;
  Token t;
}
{
  t = <S_IDENTIFIER> {fieldName = identifierParser.parse(t.toString());}
  ["." t = <S_IDENTIFIER> {tableName = fieldName; fieldName = identifierParser.parse(t.toString());} ]
  {return new FieldRef(tableName, fieldName);}
}

void select(AbstractSelectStmt v):
{
Expr where;
}
{
    <K_SELECT>  [ <K_DISTINCT> {v.setDistinct(true);}] selectItem(v) ("," selectItem(v))*
    <K_FROM>  fromClause(v)
    [<K_WHERE> where = sqlExpression(v.getGrain().getScore().getIdentifierParser()) {v.setWhereCondition(where);} ]
    [<K_GROUP> <K_BY>  groupBy(v)]
}

void parameterizedSelect(AbstractSelectStmt v):
{
Expr where;
}
{
    <K_SELECT>  [ <K_DISTINCT> {v.setDistinct(true);}] selectItem(v) ("," selectItem(v))*
    <K_FROM>  fromClause(v)
    [<K_WHERE> where = sqlExpression(v.getGrain().getScore().getIdentifierParser()) {v.setWhereCondition(where);} ]
    [<K_GROUP> <K_BY>  groupBy(v)]
}

void materializedSelect(AbstractSelectStmt v):
{
}
{
    <K_SELECT> materializedSelectItem(v) ("," materializedSelectItem(v))*
    <K_FROM>  fromClause(v)
    [<K_GROUP> <K_BY>  groupBy(v)]
}


void groupBy(AbstractSelectStmt view):
{ FieldRef fr; }
{
fr = fieldReference(view.getGrain().getScore().getIdentifierParser()) {view.addGroupByColumn(fr);}
     ("," fr = fieldReference(view.getGrain().getScore().getIdentifierParser()) {view.addGroupByColumn(fr);} )*
}

Expr aggregateFunc(AbstractSelectStmt v):
{
    Expr term;
    Token t;
}
{
      <K_COUNT> "(" "*" ")"                  { return new Count(); }
      | <K_SUM> "(" term = sqlTermExpr(v.getGrain().getScore().getIdentifierParser()) ")" { return new Sum(term); }
      | <K_MAX> "(" term = sqlTermExpr(v.getGrain().getScore().getIdentifierParser()) ")" { return new Max(term); }
      | <K_MIN> "(" term = sqlTermExpr(v.getGrain().getScore().getIdentifierParser()) ")" { return new Min(term); }
}

Expr materializedAggregateFunc(AbstractSelectStmt v):
{
    Expr term;
    Token t;
}
{
      <K_COUNT> "(" "*" ")"                     { return new Count(); }
      | <K_SUM> "(" term = fieldReference(v.getGrain().getScore().getIdentifierParser()) ")" { return new Sum(term); }
}

void selectItem(AbstractSelectStmt v):
{
  Token doc = null;
  Token aliasToken = null;
  String alias = "";
  Expr expr;  
}
{
   [doc = <CELESTA_DOC>] (expr = sqlTermExpr(v.getGrain().getScore().getIdentifierParser()) | expr = aggregateFunc(v)) [<K_AS>] [aliasToken =  <S_IDENTIFIER> {alias = aliasToken.toString();}]
   { if (alias.isEmpty() && expr instanceof FieldRef)
		   alias = ((FieldRef) expr).getColumnName();
     if (doc != null)
        expr.getMeta().setCelestaDocLexem(doc.toString());
     v.addColumn(alias, expr); }
}

void materializedSelectItem(AbstractSelectStmt v):
{
  Token doc = null;
  Token aliasToken = null;
  String alias = "";
  Expr expr;
}
{
   [doc = <CELESTA_DOC>] (expr = fieldReference(v.getGrain().getScore().getIdentifierParser()) | expr = materializedAggregateFunc(v)) [<K_AS>]
   [aliasToken =  <S_IDENTIFIER> {alias = aliasToken.toString();}]
   { if (alias.isEmpty() && expr instanceof FieldRef)
		   alias = ((FieldRef) expr).getColumnName();
     if (doc != null)
        expr.getMeta().setCelestaDocLexem(doc.toString());
     v.addColumn(alias, expr); }
}

TableRef tableReference(AbstractSelectStmt v):
{ TableRef result;
  Token t;
  String grainName = null;
  String tableName = null;
  String alias;
  IdentifierParser identifierParser = v.getGrain().getScore().getIdentifierParser();
}
{
  t = <S_IDENTIFIER> {tableName = t.toString(); alias = tableName;} 
      ["." t = <S_IDENTIFIER> {grainName = tableName; tableName = t.toString(); alias = tableName;}] 
	  [<K_AS>] [t = <S_IDENTIFIER> {alias = t.toString();} ]
  
  {
     BasicTable tab;
     if (grainName == null) {
	    tab = v.getGrain().getElement(identifierParser.parse(tableName), BasicTable.class);
	 } else {
	    tab = v.getGrain().getScore().getGrainAsDependency(v.getGrain(), grainName).getElement(identifierParser.parse(tableName), BasicTable.class);
	 }
	 return new TableRef(tab, identifierParser.parse(alias));
  }
}

String sequenceNextVal():
{
  Token t;
  String sequenceName = null;
}
{
  <K_NEXTVAL>  "(" t = <S_IDENTIFIER> ")"
  {
    sequenceName = t.toString();
    return "NEXTVAL(" + sequenceName + ")";
  }
}

void fromClause(AbstractSelectStmt v):
{TableRef tRef;}
{
    tRef = tableReference(v) {v.addFromTableRef(tRef);} 
    (tRef = join(v) {v.addFromTableRef(tRef);} )*
}

TableRef join(AbstractSelectStmt v):
{ TableRef tRef;
  TableRef.JoinType jt;
  Expr onExpr;
}
{
  (<K_INNER> {jt = TableRef.JoinType.INNER;} | <K_LEFT> {jt = TableRef.JoinType.LEFT;}| <K_RIGHT> {jt = TableRef.JoinType.RIGHT;}) 
   <K_JOIN>
   tRef = tableReference(v)
   <K_ON> 
   onExpr = sqlExpression(v.getGrain().getScore().getIdentifierParser())
   { tRef.setJoinType(jt);
     tRef.setOnExpr(onExpr);
	 return tRef;
   }
}

void executeNativeSql(GrainPart g):
{
    Token sql;
    boolean isBefore = false;
    Token dbType;
}
{
    <K_NATIVE> dbType = <K_DBTYPE> (<K_BEFORE> {isBefore = true;} | <K_AFTER>)
    sql = <NATIVE_SQL>
    {
        g.getGrain().addNativeSql(
            sql.toString(),
            isBefore,
            DBType.getByNameIgnoreCase(dbType.toString()),
            g
        );
    }
}
